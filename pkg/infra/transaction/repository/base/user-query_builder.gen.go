// Code generated by protoc-gen-all. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package base

import (
	"strconv"
	"strings"
	"time"

	"github.com/scylladb/go-set/i64set"
	"github.com/scylladb/go-set/strset"

	"github.com/xhayamix/proto-gen-spanner/pkg/domain/entity/transaction"
)

type UserQueryBuilder interface {
	SelectAllFromUser() UserQueryBuilderFirstClause
	SelectCountFromUser() UserQueryBuilderFirstClause
}

type UserQueryBuilderFinisher interface {
	OrderBy(orderPairs OrderPairs) UserQueryBuilderFinisher
	Limit(limit int32) UserQueryBuilderFinisher
	Offset(offset int32) UserQueryBuilderFinisher
	GetQuery() (string, map[string]any)
	GetQueryConditions() []*UserQueryCondition
}

type UserQueryBuilderFirstClause interface {
	UserQueryBuilderFinisher
	Where() UserQueryBuilderPredicate
}

type UserQueryBuilderSecondClause interface {
	UserQueryBuilderFinisher
	And() UserQueryBuilderPredicate
}

type UserQueryBuilderPredicate interface {
	UserIDEq(param string) UserQueryBuilderSecondClause
	UserIDNe(param string) UserQueryBuilderSecondClause
	UserIDGt(param string) UserQueryBuilderSecondClause
	UserIDGte(param string) UserQueryBuilderSecondClause
	UserIDLt(param string) UserQueryBuilderSecondClause
	UserIDLte(param string) UserQueryBuilderSecondClause
	UserIDIn(params []string) UserQueryBuilderSecondClause
	UserIDNin(params []string) UserQueryBuilderSecondClause
	ServerUserIDEq(param string) UserQueryBuilderSecondClause
	ServerUserIDNe(param string) UserQueryBuilderSecondClause
	ServerUserIDGt(param string) UserQueryBuilderSecondClause
	ServerUserIDGte(param string) UserQueryBuilderSecondClause
	ServerUserIDLt(param string) UserQueryBuilderSecondClause
	ServerUserIDLte(param string) UserQueryBuilderSecondClause
	ServerUserIDIn(params []string) UserQueryBuilderSecondClause
	ServerUserIDNin(params []string) UserQueryBuilderSecondClause
	PublicUserIDEq(param string) UserQueryBuilderSecondClause
	PublicUserIDNe(param string) UserQueryBuilderSecondClause
	PublicUserIDGt(param string) UserQueryBuilderSecondClause
	PublicUserIDGte(param string) UserQueryBuilderSecondClause
	PublicUserIDLt(param string) UserQueryBuilderSecondClause
	PublicUserIDLte(param string) UserQueryBuilderSecondClause
	PublicUserIDIn(params []string) UserQueryBuilderSecondClause
	PublicUserIDNin(params []string) UserQueryBuilderSecondClause
	CreatedTimeEq(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeNe(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeGt(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeGte(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeLt(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeLte(param time.Time) UserQueryBuilderSecondClause
	CreatedTimeIn(params []time.Time) UserQueryBuilderSecondClause
	CreatedTimeNin(params []time.Time) UserQueryBuilderSecondClause
	UpdatedTimeEq(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeNe(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeGt(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeGte(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeLt(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeLte(param time.Time) UserQueryBuilderSecondClause
	UpdatedTimeIn(params []time.Time) UserQueryBuilderSecondClause
	UpdatedTimeNin(params []time.Time) UserQueryBuilderSecondClause
}

type UserQueryCondition struct {
	column   string
	operator ConditionOperator
	value    any
}

type userQueryBuilder struct {
	builder         *strings.Builder
	params          map[string]any
	paramIndex      int
	queryConditions []*UserQueryCondition
}

func NewUserQueryBuilder() UserQueryBuilder {
	return &userQueryBuilder{
		builder:         &strings.Builder{},
		params:          make(map[string]any),
		paramIndex:      0,
		queryConditions: make([]*UserQueryCondition, 0),
	}
}

func (qb *userQueryBuilder) addParam(condition string, param interface{}) {
	qb.paramIndex++
	paramKey := ParamBaseKey + strconv.Itoa(qb.paramIndex)
	qb.params[paramKey] = param
	qb.builder.WriteString(condition + "@" + paramKey)
}

func (qb *userQueryBuilder) SelectAllFromUser() UserQueryBuilderFirstClause {
	cols := "`UserID`, `ServerUserID`, `PublicUserID`, `CreatedTime`, `UpdatedTime`"
	qb.builder.WriteString("SELECT " + cols + " FROM " + "`" + transaction.UserTableName + "`")
	return qb
}
func (qb *userQueryBuilder) SelectCountFromUser() UserQueryBuilderFirstClause {
	qb.builder.WriteString("SELECT COUNT(*) FROM " + "`" + transaction.UserTableName + "`")
	return qb
}

func (qb *userQueryBuilder) Where() UserQueryBuilderPredicate {
	qb.builder.WriteString(" WHERE ")
	return qb
}

func (qb *userQueryBuilder) And() UserQueryBuilderPredicate {
	qb.builder.WriteString(" AND ")
	return qb
}

func (qb *userQueryBuilder) UserIDEq(param string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "UserID", operator: ConditionOperatorEq, value: param})
	qb.addParam("`UserID` = ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDNe(param string) UserQueryBuilderSecondClause {
	qb.addParam("`UserID` != ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDGt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`UserID` >", param)
	return qb
}

func (qb *userQueryBuilder) UserIDGte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`UserID` >= ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDLt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`UserID` < ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDLte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`UserID` <= ", param)
	return qb
}

func (qb *userQueryBuilder) UserIDIn(params []string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "UserID", operator: ConditionOperatorIn, value: strset.New(params...)})
	qb.builder.WriteString("`UserID` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) UserIDNin(params []string) UserQueryBuilderSecondClause {
	qb.builder.WriteString("`UserID` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) ServerUserIDEq(param string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "ServerUserID", operator: ConditionOperatorEq, value: param})
	qb.addParam("`ServerUserID` = ", param)
	return qb
}

func (qb *userQueryBuilder) ServerUserIDNe(param string) UserQueryBuilderSecondClause {
	qb.addParam("`ServerUserID` != ", param)
	return qb
}

func (qb *userQueryBuilder) ServerUserIDGt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`ServerUserID` >", param)
	return qb
}

func (qb *userQueryBuilder) ServerUserIDGte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`ServerUserID` >= ", param)
	return qb
}

func (qb *userQueryBuilder) ServerUserIDLt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`ServerUserID` < ", param)
	return qb
}

func (qb *userQueryBuilder) ServerUserIDLte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`ServerUserID` <= ", param)
	return qb
}

func (qb *userQueryBuilder) ServerUserIDIn(params []string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "ServerUserID", operator: ConditionOperatorIn, value: strset.New(params...)})
	qb.builder.WriteString("`ServerUserID` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) ServerUserIDNin(params []string) UserQueryBuilderSecondClause {
	qb.builder.WriteString("`ServerUserID` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) PublicUserIDEq(param string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "PublicUserID", operator: ConditionOperatorEq, value: param})
	qb.addParam("`PublicUserID` = ", param)
	return qb
}

func (qb *userQueryBuilder) PublicUserIDNe(param string) UserQueryBuilderSecondClause {
	qb.addParam("`PublicUserID` != ", param)
	return qb
}

func (qb *userQueryBuilder) PublicUserIDGt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`PublicUserID` >", param)
	return qb
}

func (qb *userQueryBuilder) PublicUserIDGte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`PublicUserID` >= ", param)
	return qb
}

func (qb *userQueryBuilder) PublicUserIDLt(param string) UserQueryBuilderSecondClause {
	qb.addParam("`PublicUserID` < ", param)
	return qb
}

func (qb *userQueryBuilder) PublicUserIDLte(param string) UserQueryBuilderSecondClause {
	qb.addParam("`PublicUserID` <= ", param)
	return qb
}

func (qb *userQueryBuilder) PublicUserIDIn(params []string) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "PublicUserID", operator: ConditionOperatorIn, value: strset.New(params...)})
	qb.builder.WriteString("`PublicUserID` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) PublicUserIDNin(params []string) UserQueryBuilderSecondClause {
	qb.builder.WriteString("`PublicUserID` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) CreatedTimeEq(param time.Time) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "CreatedTime", operator: ConditionOperatorEq, value: param})
	qb.addParam("`CreatedTime` = ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeNe(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`CreatedTime` != ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeGt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`CreatedTime` >", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeGte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`CreatedTime` >= ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeLt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`CreatedTime` < ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeLte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`CreatedTime` <= ", param)
	return qb
}

func (qb *userQueryBuilder) CreatedTimeIn(params []time.Time) UserQueryBuilderSecondClause {
	v := i64set.New()
	for _, t := range params {
		v.Add(t.UnixNano())
	}
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "CreatedTime", operator: ConditionOperatorIn, value: v})
	qb.builder.WriteString("`CreatedTime` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) CreatedTimeNin(params []time.Time) UserQueryBuilderSecondClause {
	qb.builder.WriteString("`CreatedTime` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeEq(param time.Time) UserQueryBuilderSecondClause {
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "UpdatedTime", operator: ConditionOperatorEq, value: param})
	qb.addParam("`UpdatedTime` = ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeNe(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`UpdatedTime` != ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeGt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`UpdatedTime` >", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeGte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`UpdatedTime` >= ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeLt(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`UpdatedTime` < ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeLte(param time.Time) UserQueryBuilderSecondClause {
	qb.addParam("`UpdatedTime` <= ", param)
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeIn(params []time.Time) UserQueryBuilderSecondClause {
	v := i64set.New()
	for _, t := range params {
		v.Add(t.UnixNano())
	}
	qb.queryConditions = append(qb.queryConditions, &UserQueryCondition{column: "UpdatedTime", operator: ConditionOperatorIn, value: v})
	qb.builder.WriteString("`UpdatedTime` IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) UpdatedTimeNin(params []time.Time) UserQueryBuilderSecondClause {
	qb.builder.WriteString("`UpdatedTime` NOT IN (")
	for i, param := range params {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.addParam("", param)
	}
	qb.builder.WriteString(")")
	return qb
}

func (qb *userQueryBuilder) OrderBy(orderPairs OrderPairs) UserQueryBuilderFinisher {
	qb.builder.WriteString(" ORDER BY ")
	for i, pair := range orderPairs {
		if i != 0 {
			qb.builder.WriteString(", ")
		}
		qb.builder.WriteString("`" + pair.Column + "` " + string(pair.OrderType))
	}
	return qb
}

func (qb *userQueryBuilder) Limit(limit int32) UserQueryBuilderFinisher {
	qb.builder.WriteString(" LIMIT " + strconv.Itoa(int(limit)))
	return qb
}

func (qb *userQueryBuilder) Offset(offset int32) UserQueryBuilderFinisher {
	qb.builder.WriteString(" OFFSET " + strconv.Itoa(int(offset)))
	return qb
}

func (qb *userQueryBuilder) GetQuery() (string, map[string]any) {
	return qb.builder.String(), qb.params
}

func (qb *userQueryBuilder) GetQueryConditions() []*UserQueryCondition {
	return qb.queryConditions
}
